// VM-USB test program
// WIENER, Plein & Baus Corp. 01/2014
// Revision 2.0 - 01/22/14
// Andreas Ruben, aruben@wiener-us.com

/* Simple program to demonstrate VM_USB in EASY mode
 * 
 * Copyright (C) 2005-2009 WIENER, Plein & Baus, Ltd (thoagland@wiener-us.com)
 *
 *     This program is free software; you can redistribute it and/or
 *     modify it under the terms of the GNU General Public License as
 *     published by the Free Software Foundation, version 2.
 *
 *
 *
*/

#include <libxxusb.h>
#include <stdio.h>
#include <time.h>
#include <math.h>
#include <cstdlib>
#include <string.h>


int main (int argc,  char *argv[])
{
  
  int WriteMode;
  long buf[1000];
  int ret, i;
  int debug = 0, eclose = 0, eread = 0;
  xxusb_device_type devices[100]; 
  struct usb_device *dev;
  usb_dev_handle *udev;       // Device Handle 
  long data_w, data_r, adr;
  int errors =0;
  int Address_Modifier= 0x09;
  for (i = 1; i < argc; i++) {
    if (argv[i][0] == '-' && argv[i][1] == 'd')
      debug = 1;
    else if (strncmp(argv[i], "-e", 2) == 0)
      eclose = 1;
    else if (strncmp(argv[i], "-r", 2) == 0)
      eread = 1;
    else if (argv[i][0] == '-') {
      if (i + 1 >= argc || argv[i + 1][0] == '-')
	goto usage;
      //      if (strncmp(argv[i], "-w", 2) == 0)
	//	delta_time = 1000 * (atoi(argv[++i]));
      //else if (strncmp(argv[i], "-f", 2) == 0)
	//	strcpy(svpath, argv[++i]);
      //else if (strncmp(argv[i], "-e", 2) == 0)
	//	strcpy(expt_name, argv[++i]);
      //else if (strncmp(argv[i], "-h", 2) == 0)
	//	strcpy(host_name, argv[++i]);
	} else {
    usage:
      printf("usage: -e (close) -r (read) \n");
      return 0;
    }
  }
  
  //Find XX_USB devices and open the first one found
  xxusb_devices_find(devices);
  dev = devices[0].usbdev;
  udev = xxusb_device_open(dev); 
  
  // Make sure VM_USB opened OK
  if(!udev) {
    printf ("\n\nFailed to Open CC_USB \n\n");
    return 0;
  } else {
    printf("Device open\n"); 
  }
  	
	
	
	// write / read back 32 data VME window (Address 0 to 0x1FFE as words in Std_NoPriv_Data)
	for (i =0xfff0; i < 0xFFFF; i+=4)         
	{
		data_w = i/4+i/4*0x10000;                  // write and increment word address
		adr = i+i*0x10000;                  
		ret = VME_write_32(udev,Address_Modifier, adr, data_w);
		ret = VME_read_32(udev,Address_Modifier, adr, &data_r);

		if (data_w != data_w) 
		  errors++;
	}

	return errors;
  
 ccclose:
   // Close the Device
  xxusb_device_close(udev);
  printf("\n\n\n");
  
  return 0;
}

